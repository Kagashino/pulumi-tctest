// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CdnDomain struct {
	pulumi.CustomResourceState

	// Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
	// mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
	// acceleration and global acceleration.
	Area pulumi.StringPtrOutput `pulumi:"area"`
	// CNAME address of domain name.
	Cname pulumi.StringOutput `pulumi:"cname"`
	// Creation time of domain name.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Name of the acceleration domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Whether to enable full-path cache. Default value is `true`.
	FullUrlCache pulumi.BoolPtrOutput `pulumi:"fullUrlCache"`
	// HTTPS acceleration configuration. It's a list and consist of at most one item.
	HttpsConfig CdnDomainHttpsConfigOutput `pulumi:"httpsConfig"`
	// ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
	// value is `off`.
	Ipv6AccessSwitch pulumi.StringPtrOutput `pulumi:"ipv6AccessSwitch"`
	// Origin server configuration. It's a list and consist of at most one item.
	Origin CdnDomainOriginOutput `pulumi:"origin"`
	// The project CDN belongs to, default to 0.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
	RangeOriginSwitch pulumi.StringPtrOutput `pulumi:"rangeOriginSwitch"`
	// Request header configuration. It's a list and consist of at most one item.
	RequestHeader CdnDomainRequestHeaderOutput `pulumi:"requestHeader"`
	// Advanced path cache configuration.
	RuleCaches CdnDomainRuleCachArrayOutput `pulumi:"ruleCaches"`
	// Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
	// media VOD acceleration.
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// Acceleration service status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags of cdn domain.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewCdnDomain registers a new resource with the given unique name, arguments, and options.
func NewCdnDomain(ctx *pulumi.Context,
	name string, args *CdnDomainArgs, opts ...pulumi.ResourceOption) (*CdnDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Origin == nil {
		return nil, errors.New("invalid value for required argument 'Origin'")
	}
	if args.ServiceType == nil {
		return nil, errors.New("invalid value for required argument 'ServiceType'")
	}
	var resource CdnDomain
	err := ctx.RegisterResource("tencentcloud:Cdn/cdnDomain:CdnDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCdnDomain gets an existing CdnDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCdnDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CdnDomainState, opts ...pulumi.ResourceOption) (*CdnDomain, error) {
	var resource CdnDomain
	err := ctx.ReadResource("tencentcloud:Cdn/cdnDomain:CdnDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CdnDomain resources.
type cdnDomainState struct {
	// Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
	// mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
	// acceleration and global acceleration.
	Area *string `pulumi:"area"`
	// CNAME address of domain name.
	Cname *string `pulumi:"cname"`
	// Creation time of domain name.
	CreateTime *string `pulumi:"createTime"`
	// Name of the acceleration domain.
	Domain *string `pulumi:"domain"`
	// Whether to enable full-path cache. Default value is `true`.
	FullUrlCache *bool `pulumi:"fullUrlCache"`
	// HTTPS acceleration configuration. It's a list and consist of at most one item.
	HttpsConfig *CdnDomainHttpsConfig `pulumi:"httpsConfig"`
	// ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
	// value is `off`.
	Ipv6AccessSwitch *string `pulumi:"ipv6AccessSwitch"`
	// Origin server configuration. It's a list and consist of at most one item.
	Origin *CdnDomainOrigin `pulumi:"origin"`
	// The project CDN belongs to, default to 0.
	ProjectId *int `pulumi:"projectId"`
	// Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
	RangeOriginSwitch *string `pulumi:"rangeOriginSwitch"`
	// Request header configuration. It's a list and consist of at most one item.
	RequestHeader *CdnDomainRequestHeader `pulumi:"requestHeader"`
	// Advanced path cache configuration.
	RuleCaches []CdnDomainRuleCach `pulumi:"ruleCaches"`
	// Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
	// media VOD acceleration.
	ServiceType *string `pulumi:"serviceType"`
	// Acceleration service status.
	Status *string `pulumi:"status"`
	// Tags of cdn domain.
	Tags map[string]interface{} `pulumi:"tags"`
}

type CdnDomainState struct {
	// Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
	// mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
	// acceleration and global acceleration.
	Area pulumi.StringPtrInput
	// CNAME address of domain name.
	Cname pulumi.StringPtrInput
	// Creation time of domain name.
	CreateTime pulumi.StringPtrInput
	// Name of the acceleration domain.
	Domain pulumi.StringPtrInput
	// Whether to enable full-path cache. Default value is `true`.
	FullUrlCache pulumi.BoolPtrInput
	// HTTPS acceleration configuration. It's a list and consist of at most one item.
	HttpsConfig CdnDomainHttpsConfigPtrInput
	// ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
	// value is `off`.
	Ipv6AccessSwitch pulumi.StringPtrInput
	// Origin server configuration. It's a list and consist of at most one item.
	Origin CdnDomainOriginPtrInput
	// The project CDN belongs to, default to 0.
	ProjectId pulumi.IntPtrInput
	// Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
	RangeOriginSwitch pulumi.StringPtrInput
	// Request header configuration. It's a list and consist of at most one item.
	RequestHeader CdnDomainRequestHeaderPtrInput
	// Advanced path cache configuration.
	RuleCaches CdnDomainRuleCachArrayInput
	// Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
	// media VOD acceleration.
	ServiceType pulumi.StringPtrInput
	// Acceleration service status.
	Status pulumi.StringPtrInput
	// Tags of cdn domain.
	Tags pulumi.MapInput
}

func (CdnDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnDomainState)(nil)).Elem()
}

type cdnDomainArgs struct {
	// Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
	// mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
	// acceleration and global acceleration.
	Area *string `pulumi:"area"`
	// Name of the acceleration domain.
	Domain string `pulumi:"domain"`
	// Whether to enable full-path cache. Default value is `true`.
	FullUrlCache *bool `pulumi:"fullUrlCache"`
	// HTTPS acceleration configuration. It's a list and consist of at most one item.
	HttpsConfig *CdnDomainHttpsConfig `pulumi:"httpsConfig"`
	// ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
	// value is `off`.
	Ipv6AccessSwitch *string `pulumi:"ipv6AccessSwitch"`
	// Origin server configuration. It's a list and consist of at most one item.
	Origin CdnDomainOrigin `pulumi:"origin"`
	// The project CDN belongs to, default to 0.
	ProjectId *int `pulumi:"projectId"`
	// Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
	RangeOriginSwitch *string `pulumi:"rangeOriginSwitch"`
	// Request header configuration. It's a list and consist of at most one item.
	RequestHeader *CdnDomainRequestHeader `pulumi:"requestHeader"`
	// Advanced path cache configuration.
	RuleCaches []CdnDomainRuleCach `pulumi:"ruleCaches"`
	// Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
	// media VOD acceleration.
	ServiceType string `pulumi:"serviceType"`
	// Tags of cdn domain.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a CdnDomain resource.
type CdnDomainArgs struct {
	// Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
	// mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
	// acceleration and global acceleration.
	Area pulumi.StringPtrInput
	// Name of the acceleration domain.
	Domain pulumi.StringInput
	// Whether to enable full-path cache. Default value is `true`.
	FullUrlCache pulumi.BoolPtrInput
	// HTTPS acceleration configuration. It's a list and consist of at most one item.
	HttpsConfig CdnDomainHttpsConfigPtrInput
	// ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
	// value is `off`.
	Ipv6AccessSwitch pulumi.StringPtrInput
	// Origin server configuration. It's a list and consist of at most one item.
	Origin CdnDomainOriginInput
	// The project CDN belongs to, default to 0.
	ProjectId pulumi.IntPtrInput
	// Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
	RangeOriginSwitch pulumi.StringPtrInput
	// Request header configuration. It's a list and consist of at most one item.
	RequestHeader CdnDomainRequestHeaderPtrInput
	// Advanced path cache configuration.
	RuleCaches CdnDomainRuleCachArrayInput
	// Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
	// media VOD acceleration.
	ServiceType pulumi.StringInput
	// Tags of cdn domain.
	Tags pulumi.MapInput
}

func (CdnDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnDomainArgs)(nil)).Elem()
}

type CdnDomainInput interface {
	pulumi.Input

	ToCdnDomainOutput() CdnDomainOutput
	ToCdnDomainOutputWithContext(ctx context.Context) CdnDomainOutput
}

func (*CdnDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDomain)(nil)).Elem()
}

func (i *CdnDomain) ToCdnDomainOutput() CdnDomainOutput {
	return i.ToCdnDomainOutputWithContext(context.Background())
}

func (i *CdnDomain) ToCdnDomainOutputWithContext(ctx context.Context) CdnDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainOutput)
}

// CdnDomainArrayInput is an input type that accepts CdnDomainArray and CdnDomainArrayOutput values.
// You can construct a concrete instance of `CdnDomainArrayInput` via:
//
//          CdnDomainArray{ CdnDomainArgs{...} }
type CdnDomainArrayInput interface {
	pulumi.Input

	ToCdnDomainArrayOutput() CdnDomainArrayOutput
	ToCdnDomainArrayOutputWithContext(context.Context) CdnDomainArrayOutput
}

type CdnDomainArray []CdnDomainInput

func (CdnDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnDomain)(nil)).Elem()
}

func (i CdnDomainArray) ToCdnDomainArrayOutput() CdnDomainArrayOutput {
	return i.ToCdnDomainArrayOutputWithContext(context.Background())
}

func (i CdnDomainArray) ToCdnDomainArrayOutputWithContext(ctx context.Context) CdnDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainArrayOutput)
}

// CdnDomainMapInput is an input type that accepts CdnDomainMap and CdnDomainMapOutput values.
// You can construct a concrete instance of `CdnDomainMapInput` via:
//
//          CdnDomainMap{ "key": CdnDomainArgs{...} }
type CdnDomainMapInput interface {
	pulumi.Input

	ToCdnDomainMapOutput() CdnDomainMapOutput
	ToCdnDomainMapOutputWithContext(context.Context) CdnDomainMapOutput
}

type CdnDomainMap map[string]CdnDomainInput

func (CdnDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnDomain)(nil)).Elem()
}

func (i CdnDomainMap) ToCdnDomainMapOutput() CdnDomainMapOutput {
	return i.ToCdnDomainMapOutputWithContext(context.Background())
}

func (i CdnDomainMap) ToCdnDomainMapOutputWithContext(ctx context.Context) CdnDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDomainMapOutput)
}

type CdnDomainOutput struct{ *pulumi.OutputState }

func (CdnDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDomain)(nil)).Elem()
}

func (o CdnDomainOutput) ToCdnDomainOutput() CdnDomainOutput {
	return o
}

func (o CdnDomainOutput) ToCdnDomainOutputWithContext(ctx context.Context) CdnDomainOutput {
	return o
}

// Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
// mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
// acceleration and global acceleration.
func (o CdnDomainOutput) Area() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringPtrOutput { return v.Area }).(pulumi.StringPtrOutput)
}

// CNAME address of domain name.
func (o CdnDomainOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

// Creation time of domain name.
func (o CdnDomainOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Name of the acceleration domain.
func (o CdnDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Whether to enable full-path cache. Default value is `true`.
func (o CdnDomainOutput) FullUrlCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.BoolPtrOutput { return v.FullUrlCache }).(pulumi.BoolPtrOutput)
}

// HTTPS acceleration configuration. It's a list and consist of at most one item.
func (o CdnDomainOutput) HttpsConfig() CdnDomainHttpsConfigOutput {
	return o.ApplyT(func(v *CdnDomain) CdnDomainHttpsConfigOutput { return v.HttpsConfig }).(CdnDomainHttpsConfigOutput)
}

// ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
// value is `off`.
func (o CdnDomainOutput) Ipv6AccessSwitch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringPtrOutput { return v.Ipv6AccessSwitch }).(pulumi.StringPtrOutput)
}

// Origin server configuration. It's a list and consist of at most one item.
func (o CdnDomainOutput) Origin() CdnDomainOriginOutput {
	return o.ApplyT(func(v *CdnDomain) CdnDomainOriginOutput { return v.Origin }).(CdnDomainOriginOutput)
}

// The project CDN belongs to, default to 0.
func (o CdnDomainOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
func (o CdnDomainOutput) RangeOriginSwitch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringPtrOutput { return v.RangeOriginSwitch }).(pulumi.StringPtrOutput)
}

// Request header configuration. It's a list and consist of at most one item.
func (o CdnDomainOutput) RequestHeader() CdnDomainRequestHeaderOutput {
	return o.ApplyT(func(v *CdnDomain) CdnDomainRequestHeaderOutput { return v.RequestHeader }).(CdnDomainRequestHeaderOutput)
}

// Advanced path cache configuration.
func (o CdnDomainOutput) RuleCaches() CdnDomainRuleCachArrayOutput {
	return o.ApplyT(func(v *CdnDomain) CdnDomainRuleCachArrayOutput { return v.RuleCaches }).(CdnDomainRuleCachArrayOutput)
}

// Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
// media VOD acceleration.
func (o CdnDomainOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// Acceleration service status.
func (o CdnDomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags of cdn domain.
func (o CdnDomainOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *CdnDomain) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type CdnDomainArrayOutput struct{ *pulumi.OutputState }

func (CdnDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnDomain)(nil)).Elem()
}

func (o CdnDomainArrayOutput) ToCdnDomainArrayOutput() CdnDomainArrayOutput {
	return o
}

func (o CdnDomainArrayOutput) ToCdnDomainArrayOutputWithContext(ctx context.Context) CdnDomainArrayOutput {
	return o
}

func (o CdnDomainArrayOutput) Index(i pulumi.IntInput) CdnDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CdnDomain {
		return vs[0].([]*CdnDomain)[vs[1].(int)]
	}).(CdnDomainOutput)
}

type CdnDomainMapOutput struct{ *pulumi.OutputState }

func (CdnDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnDomain)(nil)).Elem()
}

func (o CdnDomainMapOutput) ToCdnDomainMapOutput() CdnDomainMapOutput {
	return o
}

func (o CdnDomainMapOutput) ToCdnDomainMapOutputWithContext(ctx context.Context) CdnDomainMapOutput {
	return o
}

func (o CdnDomainMapOutput) MapIndex(k pulumi.StringInput) CdnDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CdnDomain {
		return vs[0].(map[string]*CdnDomain)[vs[1].(string)]
	}).(CdnDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainInput)(nil)).Elem(), &CdnDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainArrayInput)(nil)).Elem(), CdnDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDomainMapInput)(nil)).Elem(), CdnDomainMap{})
	pulumi.RegisterOutputType(CdnDomainOutput{})
	pulumi.RegisterOutputType(CdnDomainArrayOutput{})
	pulumi.RegisterOutputType(CdnDomainMapOutput{})
}
