# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CdnDomainArgs', 'CdnDomain']

@pulumi.input_type
class CdnDomainArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 origin: pulumi.Input['CdnDomainOriginArgs'],
                 service_type: pulumi.Input[str],
                 area: Optional[pulumi.Input[str]] = None,
                 full_url_cache: Optional[pulumi.Input[bool]] = None,
                 https_config: Optional[pulumi.Input['CdnDomainHttpsConfigArgs']] = None,
                 ipv6_access_switch: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 range_origin_switch: Optional[pulumi.Input[str]] = None,
                 request_header: Optional[pulumi.Input['CdnDomainRequestHeaderArgs']] = None,
                 rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRuleCachArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a CdnDomain resource.
        :param pulumi.Input[str] domain: Name of the acceleration domain.
        :param pulumi.Input['CdnDomainOriginArgs'] origin: Origin server configuration. It's a list and consist of at most one item.
        :param pulumi.Input[str] service_type: Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
               media VOD acceleration.
        :param pulumi.Input[str] area: Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
               mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
               acceleration and global acceleration.
        :param pulumi.Input[bool] full_url_cache: Whether to enable full-path cache. Default value is `true`.
        :param pulumi.Input['CdnDomainHttpsConfigArgs'] https_config: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param pulumi.Input[str] ipv6_access_switch: ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
               value is `off`.
        :param pulumi.Input[int] project_id: The project CDN belongs to, default to 0.
        :param pulumi.Input[str] range_origin_switch: Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        :param pulumi.Input['CdnDomainRequestHeaderArgs'] request_header: Request header configuration. It's a list and consist of at most one item.
        :param pulumi.Input[Sequence[pulumi.Input['CdnDomainRuleCachArgs']]] rule_caches: Advanced path cache configuration.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of cdn domain.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "service_type", service_type)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if https_config is not None:
            pulumi.set(__self__, "https_config", https_config)
        if ipv6_access_switch is not None:
            pulumi.set(__self__, "ipv6_access_switch", ipv6_access_switch)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if range_origin_switch is not None:
            pulumi.set(__self__, "range_origin_switch", range_origin_switch)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if rule_caches is not None:
            pulumi.set(__self__, "rule_caches", rule_caches)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Name of the acceleration domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Input['CdnDomainOriginArgs']:
        """
        Origin server configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: pulumi.Input['CdnDomainOriginArgs']):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Input[str]:
        """
        Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
        media VOD acceleration.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
        mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
        acceleration and global acceleration.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable full-path cache. Default value is `true`.
        """
        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="httpsConfig")
    def https_config(self) -> Optional[pulumi.Input['CdnDomainHttpsConfigArgs']]:
        """
        HTTPS acceleration configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "https_config")

    @https_config.setter
    def https_config(self, value: Optional[pulumi.Input['CdnDomainHttpsConfigArgs']]):
        pulumi.set(self, "https_config", value)

    @property
    @pulumi.getter(name="ipv6AccessSwitch")
    def ipv6_access_switch(self) -> Optional[pulumi.Input[str]]:
        """
        ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
        value is `off`.
        """
        return pulumi.get(self, "ipv6_access_switch")

    @ipv6_access_switch.setter
    def ipv6_access_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_access_switch", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The project CDN belongs to, default to 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="rangeOriginSwitch")
    def range_origin_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        """
        return pulumi.get(self, "range_origin_switch")

    @range_origin_switch.setter
    def range_origin_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_origin_switch", value)

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional[pulumi.Input['CdnDomainRequestHeaderArgs']]:
        """
        Request header configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional[pulumi.Input['CdnDomainRequestHeaderArgs']]):
        pulumi.set(self, "request_header", value)

    @property
    @pulumi.getter(name="ruleCaches")
    def rule_caches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRuleCachArgs']]]]:
        """
        Advanced path cache configuration.
        """
        return pulumi.get(self, "rule_caches")

    @rule_caches.setter
    def rule_caches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRuleCachArgs']]]]):
        pulumi.set(self, "rule_caches", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of cdn domain.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CdnDomainState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 full_url_cache: Optional[pulumi.Input[bool]] = None,
                 https_config: Optional[pulumi.Input['CdnDomainHttpsConfigArgs']] = None,
                 ipv6_access_switch: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input['CdnDomainOriginArgs']] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 range_origin_switch: Optional[pulumi.Input[str]] = None,
                 request_header: Optional[pulumi.Input['CdnDomainRequestHeaderArgs']] = None,
                 rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRuleCachArgs']]]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Input properties used for looking up and filtering CdnDomain resources.
        :param pulumi.Input[str] area: Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
               mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
               acceleration and global acceleration.
        :param pulumi.Input[str] cname: CNAME address of domain name.
        :param pulumi.Input[str] create_time: Creation time of domain name.
        :param pulumi.Input[str] domain: Name of the acceleration domain.
        :param pulumi.Input[bool] full_url_cache: Whether to enable full-path cache. Default value is `true`.
        :param pulumi.Input['CdnDomainHttpsConfigArgs'] https_config: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param pulumi.Input[str] ipv6_access_switch: ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
               value is `off`.
        :param pulumi.Input['CdnDomainOriginArgs'] origin: Origin server configuration. It's a list and consist of at most one item.
        :param pulumi.Input[int] project_id: The project CDN belongs to, default to 0.
        :param pulumi.Input[str] range_origin_switch: Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        :param pulumi.Input['CdnDomainRequestHeaderArgs'] request_header: Request header configuration. It's a list and consist of at most one item.
        :param pulumi.Input[Sequence[pulumi.Input['CdnDomainRuleCachArgs']]] rule_caches: Advanced path cache configuration.
        :param pulumi.Input[str] service_type: Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
               media VOD acceleration.
        :param pulumi.Input[str] status: Acceleration service status.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of cdn domain.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if https_config is not None:
            pulumi.set(__self__, "https_config", https_config)
        if ipv6_access_switch is not None:
            pulumi.set(__self__, "ipv6_access_switch", ipv6_access_switch)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if range_origin_switch is not None:
            pulumi.set(__self__, "range_origin_switch", range_origin_switch)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if rule_caches is not None:
            pulumi.set(__self__, "rule_caches", rule_caches)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
        mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
        acceleration and global acceleration.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        """
        CNAME address of domain name.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of domain name.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the acceleration domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable full-path cache. Default value is `true`.
        """
        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="httpsConfig")
    def https_config(self) -> Optional[pulumi.Input['CdnDomainHttpsConfigArgs']]:
        """
        HTTPS acceleration configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "https_config")

    @https_config.setter
    def https_config(self, value: Optional[pulumi.Input['CdnDomainHttpsConfigArgs']]):
        pulumi.set(self, "https_config", value)

    @property
    @pulumi.getter(name="ipv6AccessSwitch")
    def ipv6_access_switch(self) -> Optional[pulumi.Input[str]]:
        """
        ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
        value is `off`.
        """
        return pulumi.get(self, "ipv6_access_switch")

    @ipv6_access_switch.setter
    def ipv6_access_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_access_switch", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input['CdnDomainOriginArgs']]:
        """
        Origin server configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input['CdnDomainOriginArgs']]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The project CDN belongs to, default to 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="rangeOriginSwitch")
    def range_origin_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        """
        return pulumi.get(self, "range_origin_switch")

    @range_origin_switch.setter
    def range_origin_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_origin_switch", value)

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional[pulumi.Input['CdnDomainRequestHeaderArgs']]:
        """
        Request header configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional[pulumi.Input['CdnDomainRequestHeaderArgs']]):
        pulumi.set(self, "request_header", value)

    @property
    @pulumi.getter(name="ruleCaches")
    def rule_caches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRuleCachArgs']]]]:
        """
        Advanced path cache configuration.
        """
        return pulumi.get(self, "rule_caches")

    @rule_caches.setter
    def rule_caches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRuleCachArgs']]]]):
        pulumi.set(self, "rule_caches", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
        media VOD acceleration.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Acceleration service status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of cdn domain.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


class CdnDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 full_url_cache: Optional[pulumi.Input[bool]] = None,
                 https_config: Optional[pulumi.Input[pulumi.InputType['CdnDomainHttpsConfigArgs']]] = None,
                 ipv6_access_switch: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[pulumi.InputType['CdnDomainOriginArgs']]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 range_origin_switch: Optional[pulumi.Input[str]] = None,
                 request_header: Optional[pulumi.Input[pulumi.InputType['CdnDomainRequestHeaderArgs']]] = None,
                 rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainRuleCachArgs']]]]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Create a CdnDomain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
               mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
               acceleration and global acceleration.
        :param pulumi.Input[str] domain: Name of the acceleration domain.
        :param pulumi.Input[bool] full_url_cache: Whether to enable full-path cache. Default value is `true`.
        :param pulumi.Input[pulumi.InputType['CdnDomainHttpsConfigArgs']] https_config: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param pulumi.Input[str] ipv6_access_switch: ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
               value is `off`.
        :param pulumi.Input[pulumi.InputType['CdnDomainOriginArgs']] origin: Origin server configuration. It's a list and consist of at most one item.
        :param pulumi.Input[int] project_id: The project CDN belongs to, default to 0.
        :param pulumi.Input[str] range_origin_switch: Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        :param pulumi.Input[pulumi.InputType['CdnDomainRequestHeaderArgs']] request_header: Request header configuration. It's a list and consist of at most one item.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainRuleCachArgs']]]] rule_caches: Advanced path cache configuration.
        :param pulumi.Input[str] service_type: Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
               media VOD acceleration.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of cdn domain.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdnDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CdnDomain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdnDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdnDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 full_url_cache: Optional[pulumi.Input[bool]] = None,
                 https_config: Optional[pulumi.Input[pulumi.InputType['CdnDomainHttpsConfigArgs']]] = None,
                 ipv6_access_switch: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[pulumi.InputType['CdnDomainOriginArgs']]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 range_origin_switch: Optional[pulumi.Input[str]] = None,
                 request_header: Optional[pulumi.Input[pulumi.InputType['CdnDomainRequestHeaderArgs']]] = None,
                 rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainRuleCachArgs']]]]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        else:
            opts = copy.copy(opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdnDomainArgs.__new__(CdnDomainArgs)

            __props__.__dict__["area"] = area
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["full_url_cache"] = full_url_cache
            __props__.__dict__["https_config"] = https_config
            __props__.__dict__["ipv6_access_switch"] = ipv6_access_switch
            if origin is None and not opts.urn:
                raise TypeError("Missing required property 'origin'")
            __props__.__dict__["origin"] = origin
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["range_origin_switch"] = range_origin_switch
            __props__.__dict__["request_header"] = request_header
            __props__.__dict__["rule_caches"] = rule_caches
            if service_type is None and not opts.urn:
                raise TypeError("Missing required property 'service_type'")
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["cname"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["status"] = None
        super(CdnDomain, __self__).__init__(
            'tencentcloud:Cdn/cdnDomain:CdnDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            cname: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            full_url_cache: Optional[pulumi.Input[bool]] = None,
            https_config: Optional[pulumi.Input[pulumi.InputType['CdnDomainHttpsConfigArgs']]] = None,
            ipv6_access_switch: Optional[pulumi.Input[str]] = None,
            origin: Optional[pulumi.Input[pulumi.InputType['CdnDomainOriginArgs']]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            range_origin_switch: Optional[pulumi.Input[str]] = None,
            request_header: Optional[pulumi.Input[pulumi.InputType['CdnDomainRequestHeaderArgs']]] = None,
            rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainRuleCachArgs']]]]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None) -> 'CdnDomain':
        """
        Get an existing CdnDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
               mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
               acceleration and global acceleration.
        :param pulumi.Input[str] cname: CNAME address of domain name.
        :param pulumi.Input[str] create_time: Creation time of domain name.
        :param pulumi.Input[str] domain: Name of the acceleration domain.
        :param pulumi.Input[bool] full_url_cache: Whether to enable full-path cache. Default value is `true`.
        :param pulumi.Input[pulumi.InputType['CdnDomainHttpsConfigArgs']] https_config: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param pulumi.Input[str] ipv6_access_switch: ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
               value is `off`.
        :param pulumi.Input[pulumi.InputType['CdnDomainOriginArgs']] origin: Origin server configuration. It's a list and consist of at most one item.
        :param pulumi.Input[int] project_id: The project CDN belongs to, default to 0.
        :param pulumi.Input[str] range_origin_switch: Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        :param pulumi.Input[pulumi.InputType['CdnDomainRequestHeaderArgs']] request_header: Request header configuration. It's a list and consist of at most one item.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdnDomainRuleCachArgs']]]] rule_caches: Advanced path cache configuration.
        :param pulumi.Input[str] service_type: Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
               media VOD acceleration.
        :param pulumi.Input[str] status: Acceleration service status.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of cdn domain.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdnDomainState.__new__(_CdnDomainState)

        __props__.__dict__["area"] = area
        __props__.__dict__["cname"] = cname
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["domain"] = domain
        __props__.__dict__["full_url_cache"] = full_url_cache
        __props__.__dict__["https_config"] = https_config
        __props__.__dict__["ipv6_access_switch"] = ipv6_access_switch
        __props__.__dict__["origin"] = origin
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["range_origin_switch"] = range_origin_switch
        __props__.__dict__["request_header"] = request_header
        __props__.__dict__["rule_caches"] = rule_caches
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        return CdnDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[Optional[str]]:
        """
        Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside
        mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas
        acceleration and global acceleration.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def cname(self) -> pulumi.Output[str]:
        """
        CNAME address of domain name.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of domain name.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Name of the acceleration domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable full-path cache. Default value is `true`.
        """
        return pulumi.get(self, "full_url_cache")

    @property
    @pulumi.getter(name="httpsConfig")
    def https_config(self) -> pulumi.Output['outputs.CdnDomainHttpsConfig']:
        """
        HTTPS acceleration configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "https_config")

    @property
    @pulumi.getter(name="ipv6AccessSwitch")
    def ipv6_access_switch(self) -> pulumi.Output[Optional[str]]:
        """
        ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default
        value is `off`.
        """
        return pulumi.get(self, "ipv6_access_switch")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output['outputs.CdnDomainOrigin']:
        """
        Origin server configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        The project CDN belongs to, default to 0.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="rangeOriginSwitch")
    def range_origin_switch(self) -> pulumi.Output[Optional[str]]:
        """
        Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        """
        return pulumi.get(self, "range_origin_switch")

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> pulumi.Output['outputs.CdnDomainRequestHeader']:
        """
        Request header configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "request_header")

    @property
    @pulumi.getter(name="ruleCaches")
    def rule_caches(self) -> pulumi.Output[Optional[Sequence['outputs.CdnDomainRuleCach']]]:
        """
        Advanced path cache configuration.
        """
        return pulumi.get(self, "rule_caches")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[str]:
        """
        Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming
        media VOD acceleration.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Acceleration service status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of cdn domain.
        """
        return pulumi.get(self, "tags")

